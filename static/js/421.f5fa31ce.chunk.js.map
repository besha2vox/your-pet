{"version":3,"file":"static/js/421.f5fa31ce.chunk.js","mappings":"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","sources":["shared/components/RegisterForm/RegisterForm.styled.jsx","shared/components/RegisterForm/RegisterForm.jsx","pages/RegisterPage/RegisterPage.styled.jsx","pages/RegisterPage/RegisterPage.jsx"],"sourcesContent":["import { Field } from 'formik';\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const RegisterFormEl = styled.form`\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nexport const RegisterFormTitle = styled.h1`\n  font-weight: 500;\n  font-size: 36px;\n  line-height: 1.36;\n  color: ${({ theme }) => theme.colors.black};\n  margin-bottom: 40px;\n\n  @media screen and (max-width: 767px) {\n    font-size: 24px;\n    line-height: 1.38;\n  }\n`;\n\nexport const RegisterFormUsernameContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n\n  margin-bottom: ${({ error }) => (error ? '6px' : '32px')};\n\n  @media screen and (max-width: 767px) {\n    margin-bottom: ${({ error }) => (error ? '1px' : '24px')};\n  }\n`;\n\nexport const RegisterFormUsernameInputContainer = styled.div`\n  display: flex;\n  align-items: center;\n  padding: 2px 16px;\n\n  border: 1px solid\n    ${({ theme, error }) => (error ? theme.colors.red : theme.colors.blue)};\n  border-radius: 40px;\n`;\n\nexport const RegisterFormEmailContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n\n  margin-bottom: ${({ error }) => (error ? '6px' : '32px')};\n\n  @media screen and (max-width: 767px) {\n    margin-bottom: ${({ error }) => (error ? '1px' : '24px')};\n  }\n`;\n\nexport const RegisterFormEmailInputContainer = styled.div`\n  display: flex;\n  align-items: center;\n  padding: 2px 16px;\n\n  border: 1px solid\n    ${({ theme, error }) => (error ? theme.colors.red : theme.colors.blue)};\n  border-radius: 40px;\n`;\n\nexport const RegisterFormInput = styled(Field)`\n  padding: 12px 0;\n  line-height: 1.5;\n  letter-spacing: 0.04em;\n\n  width: 100%;\n  height: 48px;\n  border: none;\n  outline: none;\n`;\n\nexport const ErrorIcon = styled.span`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 24px;\n  height: 24px;\n  cursor: pointer;\n\n  & svg {\n    stroke: ${({ theme }) => theme.colors.red};\n  }\n`;\n\nexport const ErrorMessage = styled.div`\n  padding-left: 16px;\n  margin-top: 4px;\n  color: ${({ theme }) => theme.colors.red};\n`;\n\nexport const RegisterFormPasswordContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n\n  margin-bottom: ${({ error, secure }) => (error || secure ? '6px' : '32px')};\n\n  @media screen and (max-width: 767px) {\n    margin-bottom: ${({ error, secure }) => (error || secure ? '1px' : '24px')};\n  }\n`;\n\nexport const RegisterFormPasswordInputContainer = styled.div`\n  display: flex;\n  align-items: center;\n  padding: 2px 16px;\n\n  border: 1px solid\n    ${({ theme, error, secure }) =>\n      error\n        ? theme.colors.red\n        : secure\n        ? theme.colors.green\n        : theme.colors.blue};\n  border-radius: 40px;\n`;\n\nexport const PasswordIcon = styled.span`\n  display: flex;\n  align-items: center;\n  gap: 10px;\n`;\n\nexport const EyeIcon = styled.span`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 24px;\n  height: 24px;\n  cursor: pointer;\n\n  & svg {\n    stroke: ${({ theme, error, secure }) =>\n      error\n        ? theme.colors.red\n        : secure\n        ? theme.colors.green\n        : theme.colors.blue};\n  }\n`;\n\nexport const CheckMarkIcon = styled.span`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 24px;\n  height: 24px;\n  cursor: pointer;\n\n  & svg {\n    stroke: ${({ theme }) => theme.colors.green};\n  }\n`;\n\nexport const InfoMessage = styled.div`\n  padding-left: 16px;\n  margin-top: 4px;\n  color: ${({ theme }) => theme.colors.green};\n`;\n\nexport const RegisterErrorMessage = styled.div`\n  padding: 15px 16px 0 16px;\n  color: ${({ theme }) => theme.colors.red};\n`;\n\nexport const RegisterBtn = styled.button`\n  margin-top: 8px;\n  margin-bottom: 20px;\n  width: 100%;\n\n  padding: 10px 0 10px 0;\n\n  background: ${({ theme }) => theme.colors.blue};\n  border: none;\n  border-radius: 40px;\n\n  font-weight: 600;\n  font-size: 20px;\n  line-height: 1.35;\n\n  letter-spacing: 0.04em;\n\n  color: #ffffff;\n\n  @media screen and (max-width: 767px) {\n    margin-top: 41px;\n    margin-bottom: 24px;\n  }\n`;\n\nexport const LoginText = styled.p`\n  font-weight: 400;\n  font-size: 12px;\n  line-height: 1.3;\n  letter-spacing: 0.04em;\n  color: ${({ theme }) => theme.colors.grey};\n`;\n\nexport const LoginLink = styled(Link)`\n  text-decoration-line: underline;\n  color: ${({ theme }) => theme.colors.blue};\n  display: inline;\n  cursor: pointer;\n`;\n","import { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport { Formik } from 'formik';\n\nimport { register } from 'redux/auth/operations';\n\nimport { ReactComponent as OpenEyeIcon } from '../../../images/icons/eye-open.svg';\nimport { ReactComponent as CloseEyeIcon } from '../../../images/icons/eye-closed.svg';\nimport { ReactComponent as CrossIcon } from '../../../images/icons/cross-small.svg';\nimport { ReactComponent as CheckIcon } from '../../../images/icons/check.svg';\n\nimport {\n  RegisterFormEl,\n  RegisterFormTitle,\n  RegisterFormUsernameContainer,\n  RegisterFormUsernameInputContainer,\n  RegisterFormEmailContainer,\n  RegisterFormEmailInputContainer,\n  RegisterFormInput,\n  RegisterFormPasswordContainer,\n  RegisterFormPasswordInputContainer,\n  ErrorMessage,\n  PasswordIcon,\n  RegisterBtn,\n  EyeIcon,\n  ErrorIcon,\n  CheckMarkIcon,\n  InfoMessage,\n  RegisterErrorMessage,\n  LoginText,\n  LoginLink,\n} from './RegisterForm.styled';\n\nconst initialValues = {\n  username: '',\n  email: '',\n  password: '',\n  confirmPassword: '',\n};\n\nconst fieldValidation = values => {\n  const errors = {};\n  if (!values.username) {\n    errors.username = 'This field is required';\n  } else if (/^\\s+$/.test(values.username)) {\n    errors.username = 'Username cannot be empty';\n  }\n\n  if (!values.email) {\n    errors.email = 'This field is required';\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)) {\n    errors.email = 'Enter a valid Email';\n  }\n\n  if (!values.password) {\n    errors.password = 'This field is required';\n  } else if (values.password.length < 8) {\n    errors.password = 'Password must be at least 8 characters long';\n  }\n\n  if (!values.confirmPassword) {\n    errors.confirmPassword = 'This field is required';\n  } else if (values.confirmPassword.length < 8) {\n    errors.confirmPassword = 'Password must be at least 8 characters long';\n  } else if (values.password !== values.confirmPassword) {\n    errors.confirmPassword = 'Passwords do not match';\n  }\n\n  return errors;\n};\n\nconst RegisterForm = () => {\n  const dispatch = useDispatch();\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [emailAvailable, setEmailAvailable] = useState(true);\n\n  const navigate = useNavigate();\n\n  const togglePasswordVisibility = () => {\n    setShowPassword(prevState => !prevState);\n  };\n\n  const toggleConfirmPasswordVisibility = () => {\n    setShowConfirmPassword(prevState => !prevState);\n  };\n\n  const handleSubmit = async (values, { setSubmitting, resetForm }) => {\n    if (loading) {\n      return;\n    }\n\n    setLoading(true);\n    const credentials = {\n      email: values.email,\n      password: values.password,\n      username: values.username,\n    };\n\n    try {\n      const response = await dispatch(register(credentials));\n      if (response.error) {\n        setEmailAvailable(false);\n      } else {\n        setEmailAvailable(true);\n        navigate('/user');\n      }\n    } catch (error) {\n      console.error(error);\n    } finally {\n      setLoading(false);\n      setSubmitting(false);\n    }\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validate={fieldValidation}\n      validateOnChange={false}\n      onSubmit={handleSubmit}\n    >\n      {({\n        values,\n        errors,\n        setErrors,\n        touched,\n        handleChange,\n        handleBlur,\n        handleSubmit,\n        isSubmitting,\n        resetForm,\n      }) => {\n        const isPasswordValid = values.password && values.password.length >= 8;\n        const handleFieldChange = e => {\n          const { name } = e.target;\n          setErrors({ ...errors, [name]: '' }); // Clear the error for the specific field\n          handleChange(e);\n        };\n\n        return (\n          <RegisterFormEl onSubmit={handleSubmit}>\n            <RegisterFormTitle>Registration</RegisterFormTitle>\n            <RegisterFormUsernameContainer\n              error={errors.username && touched.username}\n            >\n              <RegisterFormUsernameInputContainer\n                error={errors.username && touched.username}\n                style={{\n                  borderColor:\n                    errors.username && touched.username ? '#F43F5E' : '#54ADFF',\n                }}\n              >\n                <RegisterFormInput\n                  type=\"string\"\n                  name=\"username\"\n                  placeholder=\"Username\"\n                  value={values.username}\n                  onChange={handleFieldChange}\n                  onBlur={handleBlur}\n                  disabled={loading}\n                />\n                {errors.username && touched.username && values.username && (\n                  <ErrorIcon\n                    onClick={() => {\n                      resetForm({ values: { ...values, username: '' } });\n                    }}\n                  >\n                    <CrossIcon />\n                  </ErrorIcon>\n                )}\n              </RegisterFormUsernameInputContainer>\n              {errors.username && touched.username && (\n                <ErrorMessage name=\"username\">{errors.username}</ErrorMessage>\n              )}\n            </RegisterFormUsernameContainer>\n\n            <RegisterFormEmailContainer error={errors.email && touched.email}>\n              <RegisterFormEmailInputContainer\n                error={errors.email && touched.email}\n                style={{\n                  borderColor:\n                    errors.email && touched.email ? '#F43F5E' : '#54ADFF',\n                }}\n              >\n                <RegisterFormInput\n                  type=\"string\"\n                  name=\"email\"\n                  placeholder=\"Email\"\n                  value={values.email}\n                  onChange={handleFieldChange}\n                  onBlur={handleBlur}\n                  disabled={loading}\n                />\n                {errors.email && touched.email && values.email && (\n                  <ErrorIcon\n                    onClick={() => {\n                      resetForm({ values: { ...values, email: '' } });\n                    }}\n                  >\n                    <CrossIcon />\n                  </ErrorIcon>\n                )}\n              </RegisterFormEmailInputContainer>\n\n              {errors.email && touched.email && (\n                <ErrorMessage name=\"email\">{errors.email}</ErrorMessage>\n              )}\n            </RegisterFormEmailContainer>\n\n            <RegisterFormPasswordContainer\n              error={errors.password && touched.password}\n              secure={isPasswordValid}\n            >\n              <RegisterFormPasswordInputContainer\n                error={errors.password && touched.password}\n                secure={isPasswordValid}\n                style={{\n                  borderColor:\n                    errors.password && touched.password\n                      ? '#F43F5E'\n                      : isPasswordValid\n                      ? '#00C3AD'\n                      : '#54ADFF',\n                }}\n              >\n                <RegisterFormInput\n                  type={showPassword ? 'text' : 'password'}\n                  name=\"password\"\n                  placeholder=\"Password\"\n                  value={values.password}\n                  onChange={handleFieldChange}\n                  onBlur={handleBlur}\n                  disabled={loading}\n                />\n                <PasswordIcon>\n                  <EyeIcon\n                    onClick={togglePasswordVisibility}\n                    error={errors.password && touched.password}\n                    secure={isPasswordValid}\n                  >\n                    {showPassword ? <OpenEyeIcon /> : <CloseEyeIcon />}\n                  </EyeIcon>\n                  {isPasswordValid && (\n                    <CheckMarkIcon>\n                      <CheckIcon />\n                    </CheckMarkIcon>\n                  )}\n                  {errors.password && touched.password && values.password && (\n                    <ErrorIcon\n                      onClick={() => {\n                        resetForm({ values: { ...values, password: '' } });\n                      }}\n                    >\n                      <CrossIcon />\n                    </ErrorIcon>\n                  )}\n                </PasswordIcon>\n              </RegisterFormPasswordInputContainer>\n\n              {errors.password && touched.password && (\n                <ErrorMessage>{errors.password}</ErrorMessage>\n              )}\n              {isPasswordValid && (\n                <InfoMessage valid={isPasswordValid}>\n                  Password is secure\n                </InfoMessage>\n              )}\n            </RegisterFormPasswordContainer>\n\n            <RegisterFormPasswordContainer\n              error={errors.confirmPassword && touched.confirmPassword}\n            >\n              <RegisterFormPasswordInputContainer\n                error={errors.confirmPassword && touched.confirmPassword}\n                style={{\n                  borderColor:\n                    errors.confirmPassword && touched.confirmPassword\n                      ? '#F43F5E'\n                      : '#54ADFF',\n                }}\n              >\n                <RegisterFormInput\n                  type={showConfirmPassword ? 'text' : 'password'}\n                  name=\"confirmPassword\"\n                  placeholder=\"Confirm password\"\n                  value={values.confirmPassword}\n                  onChange={handleFieldChange}\n                  onBlur={handleBlur}\n                  disabled={loading}\n                />\n                <PasswordIcon>\n                  <EyeIcon\n                    onClick={toggleConfirmPasswordVisibility}\n                    error={errors.confirmPassword && touched.confirmPassword}\n                  >\n                    {showConfirmPassword ? <OpenEyeIcon /> : <CloseEyeIcon />}\n                  </EyeIcon>\n                  {errors.confirmPassword &&\n                    touched.confirmPassword &&\n                    values.confirmPassword && (\n                      <ErrorIcon\n                        onClick={() => {\n                          resetForm({\n                            values: { ...values, confirmPassword: '' },\n                          });\n                        }}\n                      >\n                        <CrossIcon />\n                      </ErrorIcon>\n                    )}\n                </PasswordIcon>\n              </RegisterFormPasswordInputContainer>\n\n              {errors.confirmPassword && touched.confirmPassword && (\n                <ErrorMessage>{errors.confirmPassword}</ErrorMessage>\n              )}\n            </RegisterFormPasswordContainer>\n\n            {!emailAvailable && (\n              <RegisterErrorMessage>\n                This email is already in use. Please, try with another email or\n                log in!\n              </RegisterErrorMessage>\n            )}\n\n            <RegisterBtn type=\"submit\" disabled={isSubmitting}>\n              Registration\n            </RegisterBtn>\n            <LoginText>\n              Already have an account?{' '}\n              <LoginLink to={'/login'}>Log In</LoginLink>\n            </LoginText>\n          </RegisterFormEl>\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default RegisterForm;\n","import styled from 'styled-components';\nimport desktop_1x from '../../images/background/bg-desktop@1x.png';\nimport desktop_2x from '../../images/background/bg-desktop@2x.png';\nimport tablet_1x from '../../images/background/bg-tablet@1x.png';\nimport tablet_2x from '../../images/background/bg-tablet@2x.png';\nimport mobile_1x from '../../images/background/bg-mobile@1x.png';\nimport mobile_2x from '../../images/background/bg-mobile@2x.png';\n\nexport const RegisterPageWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  padding-top: 80px;\n  height: 100vh;\n  background-repeat: no-repeat;\n  background-size: contain;\n  background-image: url('${desktop_1x}');\n\n  @media (min-device-pixel-ratio: 2),\n    (-webkit-min-device-pixel-ratio: 2),\n    (min-resolution: 192dpi),\n    (min-resolution: 2dppx) {\n    background-image: url('${desktop_2x}');\n  }\n\n  @media screen and (max-width: 1279px) {\n    background-image: url('${tablet_1x}');\n\n    @media (min-device-pixel-ratio: 2),\n      (-webkit-min-device-pixel-ratio: 2),\n      (min-resolution: 192dpi),\n      (min-resolution: 2dppx) {\n      background-image: url('${tablet_2x}');\n    }\n  }\n\n  @media screen and (max-width: 767px) {\n    padding-top: 44px;\n    background-image: url('${mobile_1x}');\n\n    @media (min-device-pixel-ratio: 2),\n      (-webkit-min-device-pixel-ratio: 2),\n      (min-resolution: 192dpi),\n      (min-resolution: 2dppx) {\n      background-image: url('${mobile_2x}');\n    }\n  }\n`;\n\nexport const RegisterFormWrapper = styled.div`\n  padding: 60px 75px;\n  width: 608px;\n  height: fit-content;\n  background: #ffffff;\n  box-shadow: 3px 8px 14px rgba(136, 198, 253, 0.19);\n  border-radius: 40px;\n\n  @media screen and (max-width: 767px) {\n    margin: 0 auto;\n    padding: 40px 12px;\n    max-width: 280px;\n\n    box-shadow: 3px 8px 14px rgba(136, 198, 253, 0.19);\n    border-radius: 20px;\n  }\n`;\n","import RegisterForm from 'shared/components/RegisterForm/RegisterForm';\nimport {\n  RegisterPageWrapper,\n  RegisterFormWrapper,\n} from './RegisterPage.styled';\n\nconst RegisterPage = () => {\n  return (\n    <RegisterPageWrapper>\n      <RegisterFormWrapper>\n        <RegisterForm />\n      </RegisterFormWrapper>\n    </RegisterPageWrapper>\n  );\n};\n\nexport default RegisterPage;\n"],"names":["RegisterFormEl","styled","RegisterFormTitle","theme","colors","black","RegisterFormUsernameContainer","error","RegisterFormUsernameInputContainer","red","blue","RegisterFormEmailContainer","RegisterFormEmailInputContainer","RegisterFormInput","Field","ErrorIcon","ErrorMessage","RegisterFormPasswordContainer","secure","RegisterFormPasswordInputContainer","green","PasswordIcon","EyeIcon","CheckMarkIcon","InfoMessage","RegisterErrorMessage","RegisterBtn","LoginText","grey","LoginLink","Link","initialValues","username","email","password","confirmPassword","fieldValidation","values","errors","test","length","dispatch","useDispatch","useState","showPassword","setShowPassword","showConfirmPassword","setShowConfirmPassword","loading","setLoading","emailAvailable","setEmailAvailable","navigate","useNavigate","togglePasswordVisibility","prevState","toggleConfirmPasswordVisibility","handleSubmit","setSubmitting","resetForm","credentials","register","console","validate","validateOnChange","onSubmit","setErrors","touched","handleChange","handleBlur","isSubmitting","isPasswordValid","handleFieldChange","e","name","target","style","borderColor","type","placeholder","value","onChange","onBlur","disabled","onClick","valid","to","RegisterPageWrapper","desktop_1x","desktop_2x","tablet_1x","tablet_2x","mobile_1x","mobile_2x","RegisterFormWrapper"],"sourceRoot":""}